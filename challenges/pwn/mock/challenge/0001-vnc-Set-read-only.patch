From 5a1458a2f61b575e6ae3ee0a2a37507ddd8ecbc8 Mon Sep 17 00:00:00 2001
From: YiFei Zhu <zhuyifei@google.com>
Date: Sat, 1 Jul 2023 16:16:07 -0700
Subject: [PATCH] vnc: Set read-only

There's a chal cheese if they can sent events to VNC in early boot.

Signed-off-by: YiFei Zhu <zhuyifei1999@gmail.com>
---
 ui/vnc.c | 204 +------------------------------------------------------
 1 file changed, 2 insertions(+), 202 deletions(-)

diff --git a/ui/vnc.c b/ui/vnc.c
index 9d8a24d..5c20dd9 100644
--- a/ui/vnc.c
+++ b/ui/vnc.c
@@ -1790,43 +1790,7 @@ static void check_pointer_type_change(Notifier *notifier, void *data)
 
 static void pointer_event(VncState *vs, int button_mask, int x, int y)
 {
-    static uint32_t bmap[INPUT_BUTTON__MAX] = {
-        [INPUT_BUTTON_LEFT]       = 0x01,
-        [INPUT_BUTTON_MIDDLE]     = 0x02,
-        [INPUT_BUTTON_RIGHT]      = 0x04,
-        [INPUT_BUTTON_WHEEL_UP]   = 0x08,
-        [INPUT_BUTTON_WHEEL_DOWN] = 0x10,
-    };
-    QemuConsole *con = vs->vd->dcl.con;
-    int width = pixman_image_get_width(vs->vd->server);
-    int height = pixman_image_get_height(vs->vd->server);
-
-    if (vs->last_bmask != button_mask) {
-        qemu_input_update_buttons(con, bmap, vs->last_bmask, button_mask);
-        vs->last_bmask = button_mask;
-    }
-
-    if (vs->absolute) {
-        qemu_input_queue_abs(con, INPUT_AXIS_X, x, 0, width);
-        qemu_input_queue_abs(con, INPUT_AXIS_Y, y, 0, height);
-    } else if (vnc_has_feature(vs, VNC_FEATURE_POINTER_TYPE_CHANGE)) {
-        qemu_input_queue_rel(con, INPUT_AXIS_X, x - 0x7FFF);
-        qemu_input_queue_rel(con, INPUT_AXIS_Y, y - 0x7FFF);
-    } else {
-        if (vs->last_x != -1) {
-            qemu_input_queue_rel(con, INPUT_AXIS_X, x - vs->last_x);
-            qemu_input_queue_rel(con, INPUT_AXIS_Y, y - vs->last_y);
-        }
-        vs->last_x = x;
-        vs->last_y = y;
-    }
-    qemu_input_event_sync();
-}
-
-static void press_key(VncState *vs, QKeyCode qcode)
-{
-    qkbd_state_key_event(vs->vd->kbd, qcode, true);
-    qkbd_state_key_event(vs->vd->kbd, qcode, false);
+    return;
 }
 
 static void vnc_led_state_change(VncState *vs)
@@ -1867,171 +1831,7 @@ static void kbd_leds(void *opaque, int ledstate)
 
 static void do_key_event(VncState *vs, int down, int keycode, int sym)
 {
-    QKeyCode qcode = qemu_input_key_number_to_qcode(keycode);
-
-    /* QEMU console switch */
-    switch (qcode) {
-    case Q_KEY_CODE_1 ... Q_KEY_CODE_9: /* '1' to '9' keys */
-        if (vs->vd->dcl.con == NULL && down &&
-            qkbd_state_modifier_get(vs->vd->kbd, QKBD_MOD_CTRL) &&
-            qkbd_state_modifier_get(vs->vd->kbd, QKBD_MOD_ALT)) {
-            /* Reset the modifiers sent to the current console */
-            qkbd_state_lift_all_keys(vs->vd->kbd);
-            console_select(qcode - Q_KEY_CODE_1);
-            return;
-        }
-    default:
-        break;
-    }
-
-    /* Turn off the lock state sync logic if the client support the led
-       state extension.
-    */
-    if (down && vs->vd->lock_key_sync &&
-        !vnc_has_feature(vs, VNC_FEATURE_LED_STATE) &&
-        keycode_is_keypad(vs->vd->kbd_layout, keycode)) {
-        /* If the numlock state needs to change then simulate an additional
-           keypress before sending this one.  This will happen if the user
-           toggles numlock away from the VNC window.
-        */
-        if (keysym_is_numlock(vs->vd->kbd_layout, sym & 0xFFFF)) {
-            if (!qkbd_state_modifier_get(vs->vd->kbd, QKBD_MOD_NUMLOCK)) {
-                trace_vnc_key_sync_numlock(true);
-                press_key(vs, Q_KEY_CODE_NUM_LOCK);
-            }
-        } else {
-            if (qkbd_state_modifier_get(vs->vd->kbd, QKBD_MOD_NUMLOCK)) {
-                trace_vnc_key_sync_numlock(false);
-                press_key(vs, Q_KEY_CODE_NUM_LOCK);
-            }
-        }
-    }
-
-    if (down && vs->vd->lock_key_sync &&
-        !vnc_has_feature(vs, VNC_FEATURE_LED_STATE) &&
-        ((sym >= 'A' && sym <= 'Z') || (sym >= 'a' && sym <= 'z'))) {
-        /* If the capslock state needs to change then simulate an additional
-           keypress before sending this one.  This will happen if the user
-           toggles capslock away from the VNC window.
-        */
-        int uppercase = !!(sym >= 'A' && sym <= 'Z');
-        bool shift = qkbd_state_modifier_get(vs->vd->kbd, QKBD_MOD_SHIFT);
-        bool capslock = qkbd_state_modifier_get(vs->vd->kbd, QKBD_MOD_CAPSLOCK);
-        if (capslock) {
-            if (uppercase == shift) {
-                trace_vnc_key_sync_capslock(false);
-                press_key(vs, Q_KEY_CODE_CAPS_LOCK);
-            }
-        } else {
-            if (uppercase != shift) {
-                trace_vnc_key_sync_capslock(true);
-                press_key(vs, Q_KEY_CODE_CAPS_LOCK);
-            }
-        }
-    }
-
-    qkbd_state_key_event(vs->vd->kbd, qcode, down);
-    if (!qemu_console_is_graphic(NULL)) {
-        bool numlock = qkbd_state_modifier_get(vs->vd->kbd, QKBD_MOD_NUMLOCK);
-        bool control = qkbd_state_modifier_get(vs->vd->kbd, QKBD_MOD_CTRL);
-        /* QEMU console emulation */
-        if (down) {
-            switch (keycode) {
-            case 0x2a:                          /* Left Shift */
-            case 0x36:                          /* Right Shift */
-            case 0x1d:                          /* Left CTRL */
-            case 0x9d:                          /* Right CTRL */
-            case 0x38:                          /* Left ALT */
-            case 0xb8:                          /* Right ALT */
-                break;
-            case 0xc8:
-                kbd_put_keysym(QEMU_KEY_UP);
-                break;
-            case 0xd0:
-                kbd_put_keysym(QEMU_KEY_DOWN);
-                break;
-            case 0xcb:
-                kbd_put_keysym(QEMU_KEY_LEFT);
-                break;
-            case 0xcd:
-                kbd_put_keysym(QEMU_KEY_RIGHT);
-                break;
-            case 0xd3:
-                kbd_put_keysym(QEMU_KEY_DELETE);
-                break;
-            case 0xc7:
-                kbd_put_keysym(QEMU_KEY_HOME);
-                break;
-            case 0xcf:
-                kbd_put_keysym(QEMU_KEY_END);
-                break;
-            case 0xc9:
-                kbd_put_keysym(QEMU_KEY_PAGEUP);
-                break;
-            case 0xd1:
-                kbd_put_keysym(QEMU_KEY_PAGEDOWN);
-                break;
-
-            case 0x47:
-                kbd_put_keysym(numlock ? '7' : QEMU_KEY_HOME);
-                break;
-            case 0x48:
-                kbd_put_keysym(numlock ? '8' : QEMU_KEY_UP);
-                break;
-            case 0x49:
-                kbd_put_keysym(numlock ? '9' : QEMU_KEY_PAGEUP);
-                break;
-            case 0x4b:
-                kbd_put_keysym(numlock ? '4' : QEMU_KEY_LEFT);
-                break;
-            case 0x4c:
-                kbd_put_keysym('5');
-                break;
-            case 0x4d:
-                kbd_put_keysym(numlock ? '6' : QEMU_KEY_RIGHT);
-                break;
-            case 0x4f:
-                kbd_put_keysym(numlock ? '1' : QEMU_KEY_END);
-                break;
-            case 0x50:
-                kbd_put_keysym(numlock ? '2' : QEMU_KEY_DOWN);
-                break;
-            case 0x51:
-                kbd_put_keysym(numlock ? '3' : QEMU_KEY_PAGEDOWN);
-                break;
-            case 0x52:
-                kbd_put_keysym('0');
-                break;
-            case 0x53:
-                kbd_put_keysym(numlock ? '.' : QEMU_KEY_DELETE);
-                break;
-
-            case 0xb5:
-                kbd_put_keysym('/');
-                break;
-            case 0x37:
-                kbd_put_keysym('*');
-                break;
-            case 0x4a:
-                kbd_put_keysym('-');
-                break;
-            case 0x4e:
-                kbd_put_keysym('+');
-                break;
-            case 0x9c:
-                kbd_put_keysym('\n');
-                break;
-
-            default:
-                if (control) {
-                    kbd_put_keysym(sym & 0x1f);
-                } else {
-                    kbd_put_keysym(sym);
-                }
-                break;
-            }
-        }
-    }
+    return;
 }
 
 static const char *code2name(int keycode)
-- 
2.41.0


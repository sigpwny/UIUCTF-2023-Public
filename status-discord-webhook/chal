#!/bin/bash
# Copyright 2020-2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source "${KCTF_BIN}/kctf-log"

CHALLENGE_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
CHALLENGE_NAME="$(basename "$CHALLENGE_DIR")"
CHALLENGE_NAMESPACE=default

export CHALLENGE_DIR
export CHALLENGE_NAME
export CHALLENGE_NAMESPACE

if [[ "$OSTYPE" =~ ^darwin.* ]]; then
  GETOPT="$(brew --prefix gnu-getopt)/bin/getopt"
else
  GETOPT="getopt"
fi

function has_cluster_config {
  [[ ! -z "${CLUSTER_NAME-}" ]]
}

function require_cluster_config {
  if ! has_cluster_config; then
    _kctf_log_err "No config loaded. You need to run \"kctf cluster\" first."
    exit 1
  fi
}

function require_active_challenge {
  if [[ -z "${CHALLENGE_DIR-}" ]]; then
    _kctf_log_err "No active challenge, please cd to a challenge directory first."
    exit 1
  fi
}

function parse_help_arg_only_usage {
  echo -e "usage: ./chal ${COMMAND} [args]" >&2
  echo -e "" >&2
  echo -e "${DESCRIPTION}" >&2
  echo -e "" >&2
  echo -e "Args:" >&2
  echo -e "  -h|--help        print this help" >&2
}

function parse_help_arg_only {
  OPTS="h"
  LONGOPTS="help"
  PARSED=$(${GETOPT} --options=$OPTS --longoptions=$LONGOPTS --name "./chal ${COMMAND}" -- "$@")
  if [[ $? -ne 0 ]]; then
    parse_help_arg_only_usage
    exit 1
  fi
  eval set -- "$PARSED"

  while true; do
    case "$1" in
      -h|--help)
        parse_help_arg_only_usage
        exit 0
        ;;
      --)
        shift
        break
        ;;
      *)
        _kctf_log_err "Unrecognized argument \"$1\"."
        parse_help_arg_only_usage
        exit 1
        ;;
    esac
  done

  require_active_challenge
}

function parse_container_name_usage {
  echo -e "usage: ./chal ${COMMAND} [args]" >&2
  echo -e "  -h|--help        print this help" >&2
  echo -e "  --container      name of the container to interact with, e.g. bot (default)" >&2
}

function parse_container_name {
  OPTS="h"
  LONGOPTS="help,container:"
  PARSED=$(${GETOPT} --options=$OPTS --longoptions=$LONGOPTS --name "./chal ${COMMAND}" -- "$@")
  if [[ $? -ne 0 ]]; then
    parse_container_name_usage
    exit 1
  fi
  eval set -- "$PARSED"

  CONTAINER="bot"
  while true; do
    case "$1" in
      -h|--help)
        parse_container_name_usage
        exit 0
        ;;
      --container)
        CONTAINER="$2"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        _kctf_log_err "Unrecognized argument \"$1\"."
        parse_container_name_usage
        exit 1
        ;;
    esac
  done

  require_active_challenge
}

function build_image {
  # build the image
  CONTAINER_NAME="$1"
  CONTAINER_DIR="${CHALLENGE_DIR}/${CONTAINER_NAME}"
  _kctf_log "building image in \"${CONTAINER_DIR}\""
  IIDFILE="$(mktemp)"
  if find "${CONTAINER_DIR}" -type l -exec false {} + >/dev/null 2>/dev/null; then
    docker build "${CONTAINER_DIR}" --iidfile "${IIDFILE}"
  else
    _kctf_log "found symlink, building with tar -czh | docker"
    tar -C "${CONTAINER_DIR}" -czh . | docker build --iidfile "${IIDFILE}" -
  fi
  if [[ $? -ne 0 ]]; then
    rm "${IIDFILE}"
    return 1
  fi
  IMAGE_ID=$(cat "${IIDFILE}")
  rm "${IIDFILE}"

  # strip optional sha256 prefix
  if [[ "${IMAGE_ID}" = sha256:* ]]; then
    IMAGE_ID=$(echo "${IMAGE_ID}" | cut -d ':' -f 2)
  fi
  _kctf_log "Image ID \"${IMAGE_ID}\""
}

function build_images {
  build_image bot || return
  BOT_IMAGE_LOCAL="${IMAGE_ID}"
}

function push_image {
  IMAGE_NAME=$1
  IMAGE_ID=$2

  case "${CLUSTER_TYPE}" in
    gce)
      IMAGE_URL="${REGISTRY}/${PROJECT}/${CHALLENGE_NAME}-${IMAGE_NAME}:${IMAGE_ID}"
      docker tag "${IMAGE_ID}" "${IMAGE_URL}" || return
      docker push "${IMAGE_URL}" || return
      ;;
    kind)
      IMAGE_URL="kind/${IMAGE_NAME}:${IMAGE_ID}"
      docker tag "${IMAGE_ID}" "${IMAGE_URL}" || return
      "${KCTF_BIN}/kind" load docker-image --name "${CLUSTER_NAME}" "${IMAGE_URL}" || return
      ;;
    *)
      _kctf_log_err "unknown cluster type \"${CLUSTER_TYPE}\""
      return 1
      ;;
  esac
  _kctf_log "Image pushed to \"${IMAGE_URL}\""
}

function push_images {
  push_image "bot" "${BOT_IMAGE_LOCAL}" || return
  BOT_IMAGE_REMOTE="${IMAGE_URL}"
}

function kctf_chal_start {
  require_cluster_config
  COMMAND="start" DESCRIPTION="Deploy bot to the cluster." parse_help_arg_only $@ || return
  build_images || return
  push_images || return

  "${KCTF_BIN}/yq" eval "(select(.kind == \"Deployment\") | select(.metadata.name == \"status-discord-webhook\") | .spec.template.spec.containers.[] | select(.name == \"bot\").image) = \"${BOT_IMAGE_REMOTE}\"" --inplace "${CHALLENGE_DIR}/bot.yaml"
  "${KCTF_BIN}/kubectl" apply -f "${CHALLENGE_DIR}/bot.yaml" || return
  "${KCTF_BIN}/kubectl" apply -f "${CHALLENGE_DIR}/bot.secret.yaml" || return
}

function kctf_chal_stop {
  require_cluster_config
  COMMAND="stop" DESCRIPTION="Stop bot running on the cluster." parse_help_arg_only $@ || return

  "${KCTF_BIN}/kubectl" delete -f "${CHALLENGE_DIR}/bot.yaml" || return
  "${KCTF_BIN}/kubectl" delete -f "${CHALLENGE_DIR}/bot.secret.yaml" || return
}

function kctf_chal_status {
  require_cluster_config
  COMMAND="status" DESCRIPTION="Print the bot status." parse_help_arg_only $@ || return

  echo "= DEPLOYMENTS ="
  echo
  "${KCTF_BIN}/kubectl" get deployments -l "app=status-discord-webhook" --namespace "${CHALLENGE_NAMESPACE}"
  echo
  echo "= PODs ="
  echo
  "${KCTF_BIN}/kubectl" get pods -l "app=status-discord-webhook" -o wide --namespace "${CHALLENGE_NAMESPACE}"
}

function kctf_chal_debug_logs_usage {
  echo -e "usage: ./chal debug logs [args]" >&2
  echo -e "  -h|--help        print this help" >&2
  echo -e "  --container      name of the container to interact with, e.g. bot (default)" >&2
  echo -e "  --tail           how many lines to print per pod (default 20)" >&2
}

function kctf_chal_debug_logs {
  require_cluster_config

  OPTS="h"
  LONGOPTS="help,container:,tail:"
  PARSED=$(${GETOPT} --options=$OPTS --longoptions=$LONGOPTS --name "./chal ${COMMAND}" -- "$@")
  if [[ $? -ne 0 ]]; then
    kctf_chal_debug_logs_usage
    exit 1
  fi
  eval set -- "$PARSED"

  CONTAINER="bot"
  TAIL="20"
  while true; do
    case "$1" in
      -h|--help)
        kctf_chal_debug_logs_usage
        exit 0
        ;;
      --container)
        CONTAINER="$2"
        shift 2
        ;;
      --tail)
        TAIL="$2"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        _kctf_log_err "Unrecognized argument \"$1\"."
        kctf_chal_debug_logs_usage
        exit 1
        ;;
    esac
  done

  require_active_challenge

  pods=($("${KCTF_BIN}/kubectl" get pods -l "app=status-discord-webhook" -o jsonpath='{.items[*].metadata.name}' --namespace "${CHALLENGE_NAMESPACE}"))

  if [[ ${#pods[@]} -eq 0 ]]; then
    _kctf_log_err 'No pods found. Is the challenge running?'
    return 1
  fi

  for pod in "${pods[@]}"; do
    startTime=$("${KCTF_BIN}/kubectl" get "pods/${pod}" -o jsonpath='{.status.startTime}' --namespace "${CHALLENGE_NAMESPACE}")
    _kctf_log "== ${pod} (started @ ${startTime}) =="
    "${KCTF_BIN}/kubectl" logs "pods/${pod}" --tail="${TAIL}" -c "${CONTAINER}" --namespace "${CHALLENGE_NAMESPACE}"
  done
}

function kctf_chal_debug_ssh {
  require_cluster_config
  COMMAND="debug ssh" parse_container_name $@ || return

  pods=($("${KCTF_BIN}/kubectl" get pods -l "app=status-discord-webhook" -o jsonpath='{.items[*].metadata.name}' --namespace "${CHALLENGE_NAMESPACE}"))
  NAMESPACE="${CHALLENGE_NAMESPACE}"

  if [[ ${#pods[@]} -eq 0 ]]; then
    _kctf_log_err 'No pods found. Is the challenge running?'
    return 1
  fi

  pod="${pods[0]}"
  if [[ ${#pods[@]} -ne 1 ]]; then
    _kctf_log "Found ${#pods[@]} pods, connecting to the most recent one."
    _kctf_log "You can list the other pods with 'kubectl get pods'"
    _kctf_log "and connect to them using 'kubectl exec pod/PODNAME --namespace ${CHALLENGE_NAMESPACE} -it -- /bin/bash'"

    latestStartTime=$(date -d "$("${KCTF_BIN}/kubectl" get "pods/${pod}" -o jsonpath='{.status.startTime}' --namespace "${CHALLENGE_NAMESPACE}")" '+%s')
    for (( i=1;  i < ${#pods[@]};  i++ )); do
      otherPod="${pods[$i]}"
      otherStartTime=$(date -d "$("${KCTF_BIN}/kubectl" get "pods/${otherPod}" -o jsonpath='{.status.startTime}' --namespace "${CHALLENGE_NAMESPACE}")" '+%s')
      if [[ -z "$("${KCTF_BIN}/kubectl" get "pod/${otherPod}" -o jsonpath="{.status.containerStatuses[?(@.name==\"${CONTAINER}\")].state.running}" --namespace "${CHALLENGE_NAMESPACE}")" ]]; then
        _kctf_log_warn "skipping pod/${otherPod} since the container \"${CONTAINER}\" is not running"
        continue
      fi
      if [[ "${otherStartTime}" -gt "${latestStartTime}" ]]; then
        latestStartTime="${otherStartTime}"
        pod="${otherPod}"
      fi
    done
  fi

  _kctf_log "Connecting to pod ${pod}"
  "${KCTF_BIN}/kubectl" exec "pod/${pod}" --namespace "${CHALLENGE_NAMESPACE}" -c "${CONTAINER}" -it -- /bin/bash
}

function kctf_chal_debug_usage {
  echo -e "usage: ./chal debug command" >&2
  echo -e "available commands:" >&2
  echo -e "  logs:         print logs of the container" >&2
  echo -e "  ssh:          spawn an interactive bash in the container" >&2
}

function kctf_chal_debug {
  if [[ $# -lt 1 ]]; then
    _kctf_log_err "unexpected argument count"
    kctf_chal_debug_usage
    exit 1
  fi

  case "$1" in
    -h|--help)
      kctf_chal_debug_usage
      exit 0
      ;;
    logs)
      shift
      kctf_chal_debug_logs $@
      ;;
    ssh)
      shift
      kctf_chal_debug_ssh $@
      ;;
    *)
      _kctf_log_err "unknown command"
      kctf_chal_debug_usage
      exit 1
      ;;
  esac
}

function kctf_chal_usage {
  echo -e "usage: chal.sh command" >&2
  echo -e "available commands:" >&2
  echo -e "  start:   deploy bot to the cluster" >&2
  echo -e "  stop:    delete bot from the cluster" >&2
  echo -e "  status:  print the current status of bot" >&2
  echo -e "  debug:   commands for debugging bot" >&2
}

if [[ $# -lt 1 ]]; then
  _kctf_log_err "unexpected argument count"
  kctf_chal_usage
  exit 1
fi

if [[ $CLUSTER_TYPE != gce ]]; then
  _kctf_log_err "can only setup bot on GCE"
  exit 1
fi

case "$1" in
  -h|--help)
    kctf_chal_usage
    exit 0
    ;;
  start)
    shift
    kctf_chal_start $@
    ;;
  stop)
    shift
    kctf_chal_stop $@
    ;;
  status)
    shift
    kctf_chal_status $@
    ;;
  debug)
    shift
    kctf_chal_debug $@
    ;;
  *)
    _kctf_log_err "unknown command"
    kctf_chal_usage
    exit 1
    ;;
esac

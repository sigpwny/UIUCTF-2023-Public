#!/bin/bash
# Copyright 2020-2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source "${KCTF_BIN}/kctf-log"

CHALLENGE_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
CHALLENGE_NAME="$(basename "$CHALLENGE_DIR")"
CHALLENGE_NAMESPACE=default

if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
  CHALLENGE_IMAGES=(instancer hostproxy)
else
  CHALLENGE_NAMESPACE_MANAGED="$CHALLENGE_NAME-managed"
  INSTANCER_DIR="$(cd -- "$(dirname -- "$(readlink -- "${BASH_SOURCE[0]}")")" &> /dev/null && pwd)"
  CHALLENGE_IMAGES=(challenge)

  if [[ -f "${CHALLENGE_DIR}/instancer-hooks" ]]; then
    source "${CHALLENGE_DIR}/instancer-hooks"
  fi
fi

export CHALLENGE_DIR
export CHALLENGE_NAME
export CHALLENGE_NAMESPACE

if [[ "$OSTYPE" =~ ^darwin.* ]]; then
  GETOPT="$(brew --prefix gnu-getopt)/bin/getopt"
else
  GETOPT="getopt"
fi

function has_cluster_config {
  [[ ! -z "${CLUSTER_NAME-}" ]]
}

function require_cluster_config {
  if ! has_cluster_config; then
    _kctf_log_err "No config loaded. You need to run \"kctf cluster\" first."
    exit 1
  fi
}

function require_active_challenge {
  if [[ -z "${CHALLENGE_DIR-}" ]]; then
    _kctf_log_err "No active challenge, please cd to a challenge directory first."
    exit 1
  fi
}

function parse_help_arg_only_usage {
  echo -e "usage: kctf chal ${COMMAND} [args]" >&2
  echo -e "" >&2
  echo -e "${DESCRIPTION}" >&2
  echo -e "" >&2
  echo -e "Args:" >&2
  echo -e "  -h|--help        print this help" >&2
}

function parse_help_arg_only {
  OPTS="h"
  LONGOPTS="help"
  PARSED=$(${GETOPT} --options=$OPTS --longoptions=$LONGOPTS --name "kctf chal ${COMMAND}" -- "$@")
  if [[ $? -ne 0 ]]; then
    parse_help_arg_only_usage
    exit 1
  fi
  eval set -- "$PARSED"

  while true; do
    case "$1" in
      -h|--help)
        parse_help_arg_only_usage
        exit 0
        ;;
      --)
        shift
        break
        ;;
      *)
        _kctf_log_err "Unrecognized argument \"$1\"."
        parse_help_arg_only_usage
        exit 1
        ;;
    esac
  done

  require_active_challenge
}

function build_image {
  # build the image
  CONTAINER_NAME="$1"
  CONTAINER_DIR="${CHALLENGE_DIR}/${CONTAINER_NAME}"
  _kctf_log "building image in \"${CONTAINER_DIR}\""
  IIDFILE="$(mktemp)"
  if find "${CONTAINER_DIR}" -type l -exec false {} + >/dev/null 2>/dev/null; then
    docker build "${CONTAINER_DIR}" --iidfile "${IIDFILE}"
  else
    _kctf_log "found symlink, building with tar -czh | docker"
    tar -C "${CONTAINER_DIR}" -czh . | docker build --iidfile "${IIDFILE}" -
  fi
  if [[ $? -ne 0 ]]; then
    rm "${IIDFILE}"
    return 1
  fi
  IMAGE_ID=$(cat "${IIDFILE}")
  rm "${IIDFILE}"

  # strip optional sha256 prefix
  if [[ "${IMAGE_ID}" = sha256:* ]]; then
    IMAGE_ID=$(echo "${IMAGE_ID}" | cut -d ':' -f 2)
  fi
  _kctf_log "Image ID \"${IMAGE_ID}\""
}

function build_images {
  declare -gA IMAGES_LOCAL
  for IMAGE in "${CHALLENGE_IMAGES[@]}"; do
    build_image "${IMAGE}" || return
    IMAGES_LOCAL["${IMAGE}"]="${IMAGE_ID}"
  done
}

function push_image {
  IMAGE_NAME=$1
  IMAGE_ID=$2

  case "${CLUSTER_TYPE}" in
    gce)
      IMAGE_URL="${REGISTRY}/${PROJECT}/${CHALLENGE_NAME}-${IMAGE_NAME}:${IMAGE_ID}"
      docker tag "${IMAGE_ID}" "${IMAGE_URL}" || return
      docker push "${IMAGE_URL}" || return
      ;;
    kind)
      IMAGE_URL="kind/${IMAGE_NAME}:${IMAGE_ID}"
      docker tag "${IMAGE_ID}" "${IMAGE_URL}" || return
      "${KCTF_BIN}/kind" load docker-image --name "${CLUSTER_NAME}" "${IMAGE_URL}" || return
      ;;
    *)
      _kctf_log_err "unknown cluster type \"${CLUSTER_TYPE}\""
      return 1
      ;;
  esac
  _kctf_log "Image pushed to \"${IMAGE_URL}\""
}

function push_images {
  declare -gA IMAGES_REMOTE
  for IMAGE in "${CHALLENGE_IMAGES[@]}"; do
    push_image "${IMAGE}" "${IMAGES_LOCAL[$IMAGE]}" || return
    IMAGES_REMOTE["${IMAGE}"]="${IMAGE_URL}"
  done
}

function kctf_chal_start {
  require_cluster_config
  COMMAND="start" DESCRIPTION="Deploy the challenge to the cluster." parse_help_arg_only $@ || return
  build_images || return
  push_images || return

  if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
    "${KCTF_BIN}/yq" eval "(select(.kind == \"Deployment\") | select(.metadata.name == \"instancer\") | .spec.template.spec.containers.[] | select(.name == \"instancer\").image) = \"${IMAGES_REMOTE[instancer]}\"" --inplace "${CHALLENGE_DIR}/instancer.yaml"
    "${KCTF_BIN}/yq" eval "(select(.kind == \"Deployment\") | select(.metadata.name == \"hostproxy\") | .spec.template.spec.containers.[] | select(.name == \"hostproxy\").image) = \"${IMAGES_REMOTE[hostproxy]}\"" --inplace "${CHALLENGE_DIR}/instancer.yaml"

    "${KCTF_BIN}/kubectl" create configmap instance-templates --from-file="${CHALLENGE_DIR}/instance-templates" -o yaml --dry-run=client | \
      "${KCTF_BIN}/kubectl" apply -f - || return
    if git config --local --get filter.git-crypt.smudge > /dev/null; then
      "${KCTF_BIN}/kubectl" apply -f "${CHALLENGE_DIR}/instancer.secret.yaml" || return
    fi
    "${KCTF_BIN}/kubectl" apply -f "${CHALLENGE_DIR}/instancer.yaml" || return
    if [[ "${CLUSTER_TYPE}" == "gce" ]]; then
      "${KCTF_BIN}/kubectl" get secret tls-cert --namespace=kctf-system -o yaml | \
        "${KCTF_BIN}/yq" eval ".metadata.annotations[\"kubectl.kubernetes.io/last-applied-configuration\"]" - | \
        "${KCTF_BIN}/yq" eval ".metadata.namespace = \"${CHALLENGE_NAMESPACE}\" | .metadata.name = \"tls-cert-instancer\"" - | \
        "${KCTF_BIN}/kubectl" apply -f -
    fi
  else
    "${KCTF_BIN}/yq" eval "(select(.kind == \"Job\") | select(.metadata.name == \"INSTANCE_NAME\") | .spec.template.spec.containers.[] | select(.name == \"challenge\").image) = \"${IMAGES_REMOTE[challenge]}\"" --inplace "${INSTANCER_DIR}/instance-templates/${CHALLENGE_NAME}.yaml" || return

    cat "${INSTANCER_DIR}/perchallenge.yaml" | \
      sed "s/CHALLENGE_NAME/${CHALLENGE_NAME}/g" | \
      "${KCTF_BIN}/kubectl" apply -f - || return

    if [[ $(type -t instancer_hook_start) == function ]]; then
      instancer_hook_start || return
    fi

    "${INSTANCER_DIR}/chal" start || return
  fi
}

function kctf_chal_stop {
  require_cluster_config
  COMMAND="stop" DESCRIPTION="Stop a challenge running on the cluster." parse_help_arg_only $@ || return

  if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
    "${KCTF_BIN}/kubectl" delete configmap instance-templates
    "${KCTF_BIN}/kubectl" delete -f "${CHALLENGE_DIR}/instancer.yaml" || return
  else
    if [[ $(type -t instancer_hook_stop) == function ]]; then
      instancer_hook_stop || return
    fi

    cat "${INSTANCER_DIR}/perchallenge.yaml" | \
      sed "s/CHALLENGE_NAME/${CHALLENGE_NAME}/g" | \
      "${KCTF_BIN}/kubectl" delete -f - || return
  fi
}

function kctf_chal_status {
  require_cluster_config
  COMMAND="status" DESCRIPTION="Print the challenge status." parse_help_arg_only $@ || return

  if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
    echo "= NAMESPACES ="
    echo
    "${KCTF_BIN}/kubectl" get namespace -l "uiuctf-namespace=instancer-managed"
    echo
    echo "= DEPLOYMENTS ="
    echo
    "${KCTF_BIN}/kubectl" get deployments -l "app in (instancer, hostproxy)" --namespace "${CHALLENGE_NAMESPACE}"
    echo
    echo "= PODs ="
    echo
    "${KCTF_BIN}/kubectl" get pods -l "app in (instancer, hostproxy)" -o wide --namespace "${CHALLENGE_NAMESPACE}"
    echo
    echo "= EXTERNAL SERVICES ="
    echo
    echo "SERVICES:"
    "${KCTF_BIN}/kubectl" get services -l "app in (instancer, hostproxy)" -o custom-columns="NAME:.metadata.name,TYPE:.spec.type,EXTERNAL-IP:.status.loadBalancer.ingress[*]['ip'],PORT:.spec.ports[*].port,DNS:.metadata.annotations['external-dns\\.alpha\\.kubernetes\\.io/hostname']" --namespace "${CHALLENGE_NAMESPACE}"
  else
    echo "= NAMESPACE ="
    echo
    "${KCTF_BIN}/kubectl" get namespace "${CHALLENGE_NAMESPACE_MANAGED}"
    echo
    echo "= JOBS (INSTANCES) ="
    echo
    "${KCTF_BIN}/kubectl" get jobs --namespace "${CHALLENGE_NAMESPACE_MANAGED}"
    echo
    echo "= PODs ="
    echo
    "${KCTF_BIN}/kubectl" get pods -o wide --namespace "${CHALLENGE_NAMESPACE_MANAGED}"
    echo
    echo "= EXTERNAL SERVICES ="
    echo
    echo "SERVICES:"
    "${KCTF_BIN}/kubectl" get services -o custom-columns="NAME:.metadata.name,TYPE:.spec.type,EXTERNAL-IP:.status.loadBalancer.ingress[*]['ip'],PORT:.spec.ports[*].port,DNS:.metadata.annotations['external-dns\\.alpha\\.kubernetes\\.io/hostname']" --namespace "${CHALLENGE_NAMESPACE_MANAGED}"
    echo
    echo "Ingresses:"
    "${KCTF_BIN}/kubectl" get ingress -l "app in (${CHALLENGE_NAME}-instancer, ${CHALLENGE_NAME}-hostproxy)" -o wide --namespace "${CHALLENGE_NAMESPACE}"
  fi
}

function kctf_chal_certbot {
  require_cluster_config
  COMMAND="certbot" DESCRIPTION="Run certbot for the challenge." parse_help_arg_only $@ || return

  if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
    echo 'Will not create cert for instancer itself. KCTF will handle this automatically.'
    return
  fi

  DOMAIN="${CHALLENGE_NAME}.${DOMAIN_NAME}"
  echo "Will create SSL certs for *.${DOMAIN}."
  echo -n 'Do you want to proceed? (Press Ctrl-C to abort) '
  read

  cat "${INSTANCER_DIR}/certbot.yaml" | \
    sed "s/CHALLENGE_NAME/${CHALLENGE_NAME}/g" | \
    sed "s/EMAIL_ADDRESS/${EMAIL_ADDRESS}/g" | \
    sed "s/DOMAIN/${DOMAIN}/g" | \
    "${KCTF_BIN}/kubectl" apply -f - || return

  "${KCTF_BIN}/kubectl" wait --for=condition=ready pod -l "app=instancer-certbot,chal=${CHALLENGE_NAME}" -n kctf-system || return

  "${KCTF_BIN}/kubectl" logs -f "jobs/instancer-certbot-${CHALLENGE_NAME}" -n kctf-system || return

  # I wish we can simply kubectl cp from dead container, but
  # https://github.com/kubernetes/kubernetes/issues/111045
  cat "${INSTANCER_DIR}/certbot-fetch.yaml" | \
    sed "s/CHALLENGE_NAME/${CHALLENGE_NAME}/g" | \
    "${KCTF_BIN}/kubectl" apply -f - || return

  "${KCTF_BIN}/kubectl" wait --for=condition=ready pod -l "app=instancer-certbot-fetch,chal=${CHALLENGE_NAME}" -n kctf-system || return

  pod=($("${KCTF_BIN}/kubectl" get pods -l "app=instancer-certbot-fetch,chal=${CHALLENGE_NAME}" -o jsonpath='{.items[*].metadata.name}' --namespace kctf-system))
  "${KCTF_BIN}/kubectl" cp "kctf-system/${pod[0]}:/export/${DOMAIN}/fullchain.pem" "${INSTANCER_DIR}/hostproxy-cert/${CHALLENGE_NAME}-fullchain.pem" || return
  "${KCTF_BIN}/kubectl" cp "kctf-system/${pod[0]}:/export/${DOMAIN}/privkey.pem" "${INSTANCER_DIR}/hostproxy-cert/${CHALLENGE_NAME}-privkey.pem" || return

  kubectl delete job "instancer-certbot-fetch-${CHALLENGE_NAME}" -n kctf-system || return
  kubectl delete pvc "instancer-certbot-${CHALLENGE_NAME}-pvc" -n kctf-system || return

  "${KCTF_BIN}/kubectl" create secret tls "tls-cert-${CHALLENGE_NAME}" \
    --cert "${INSTANCER_DIR}/hostproxy-cert/${CHALLENGE_NAME}-fullchain.pem" \
    --key "${INSTANCER_DIR}/hostproxy-cert/${CHALLENGE_NAME}-privkey.pem"
}

function kctf_chal_debug_logs_usage {
  echo -e "usage: kctf chal debug logs [args]" >&2
  echo -e "  -h|--help        print this help" >&2
  if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
    echo -e "  -d|--deployment  deployment (instancer or hostproxy)" >&2
  else
    echo -e "  -i|--instance    instance name of challenge" >&2
    echo -e "  -c|--container   name of the container to interact with, e.g. container (default)" >&2
  fi
  echo -e "  --tail           how many lines to print per pod (default 20)" >&2
}

function kctf_chal_debug_logs {
  require_cluster_config

  if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
    OPTS="hd:"
    LONGOPTS="help,deployment:,tail:"
  else
    OPTS="hi:c:"
    LONGOPTS="help,instance:,container:,tail:"
  fi
  PARSED=$(${GETOPT} --options=$OPTS --longoptions=$LONGOPTS --name "kctf chal ${COMMAND}" -- "$@")
  if [[ $? -ne 0 ]]; then
    kctf_chal_debug_logs_usage
    exit 1
  fi
  eval set -- "$PARSED"

  DEPLOYMENT=""
  INSTANCE=""
  CONTAINER=""
  TAIL="20"
  while true; do
    case "$1" in
      -h|--help)
        kctf_chal_debug_logs_usage
        exit 0
        ;;
      -d|--deployment)
        DEPLOYMENT="$2"
        shift 2
        ;;
      -i|--instance)
        INSTANCE="$2"
        shift 2
        ;;
      -c|--container)
        CONTAINER="$2"
        shift 2
        ;;
      --tail)
        TAIL="$2"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        _kctf_log_err "Unrecognized argument \"$1\"."
        kctf_chal_debug_logs_usage
        exit 1
        ;;
    esac
  done

  require_active_challenge

  local NAMESPACE
  if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
    if [[ -z $DEPLOYMENT ]]; then
      _kctf_log_err '--deployment required'
      return 1
    fi
    pods=($("${KCTF_BIN}/kubectl" get pods -l "app=${DEPLOYMENT}" -o jsonpath='{.items[*].metadata.name}' --namespace "${CHALLENGE_NAMESPACE_MANAGED}"))
    NAMESPACE="${CHALLENGE_NAMESPACE}"
  else
    if [[ -z $INSTANCE ]]; then
      _kctf_log_err '--instance required'
      return 1
    fi
    pods=($("${KCTF_BIN}/kubectl" get pods -l "job-name=${INSTANCE}" -o jsonpath='{.items[*].metadata.name}' --namespace "${CHALLENGE_NAMESPACE_MANAGED}"))
    NAMESPACE="${CHALLENGE_NAMESPACE_MANAGED}"
  fi

  if [[ ${#pods[@]} -eq 0 ]]; then
    _kctf_log_err 'No pods found. Is the challenge running?'
    return 1
  fi

  for pod in "${pods[@]}"; do
    startTime=$("${KCTF_BIN}/kubectl" get "pods/${pod}" -o jsonpath='{.status.startTime}' --namespace "${NAMESPACE}")
    _kctf_log "== ${pod} (started @ ${startTime}) =="
    "${KCTF_BIN}/kubectl" logs "pods/${pod}" --tail="${TAIL}" -c "${CONTAINER}" --namespace "${NAMESPACE}"
  done
}

function kctf_chal_debug_ssh_usage {
  echo -e "usage: kctf chal debug ssh [args]" >&2
  echo -e "  -h|--help        print this help" >&2
  if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
    echo -e "  -d|--deployment  deployment (instancer or hostproxy)" >&2
  else
    echo -e "  -i|--instance    instance name of challenge" >&2
    echo -e "  -c|--container   name of the container to interact with, e.g. container (default)" >&2
  fi
}

function kctf_chal_debug_ssh {
  require_cluster_config

  if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
    OPTS="hd:"
    LONGOPTS="help,deployment:"
  else
    OPTS="hi:c:"
    LONGOPTS="help,instance:"
    LONGOPTS="help,instance:,container:,tail:"
  fi
  PARSED=$(${GETOPT} --options=$OPTS --longoptions=$LONGOPTS --name "kctf chal debug ssh" -- "$@")
  if [[ $? -ne 0 ]]; then
    kctf_chal_debug_ssh_usage
    exit 1
  fi
  eval set -- "$PARSED"

  DEPLOYMENT=""
  INSTANCE=""
  CONTAINER=""
  while true; do
    case "$1" in
      -h|--help)
        kctf_chal_debug_ssh_usage
        exit 0
        ;;
      -d|--deployment)
        DEPLOYMENT="$2"
        shift 2
        ;;
      -i|--instance)
        INSTANCE="$2"
        shift 2
        ;;
      -c|--container)
        CONTAINER="$2"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        _kctf_log_err "Unrecognized argument \"$1\"."
        kctf_chal_debug_ssh_usage
        exit 1
        ;;
    esac
  done

  require_active_challenge

  local NAMESPACE
  if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
    if [[ -z $DEPLOYMENT ]]; then
      _kctf_log_err '--deployment required'
      return 1
    fi
    pods=($("${KCTF_BIN}/kubectl" get pods -l "app=${DEPLOYMENT}" -o jsonpath='{.items[*].metadata.name}' --namespace "${CHALLENGE_NAMESPACE_MANAGED}"))
    NAMESPACE="${CHALLENGE_NAMESPACE}"
  else
    if [[ -z $INSTANCE ]]; then
      _kctf_log_err '--instance required'
      return 1
    fi
    pods=($("${KCTF_BIN}/kubectl" get pods -l "job-name=${INSTANCE}" -o jsonpath='{.items[*].metadata.name}' --namespace "${CHALLENGE_NAMESPACE_MANAGED}"))
    NAMESPACE="${CHALLENGE_NAMESPACE_MANAGED}"
  fi

  if [[ ${#pods[@]} -eq 0 ]]; then
    _kctf_log_err 'No pods found. Is the challenge running?'
    return 1
  fi

  pod="${pods[0]}"
  if [[ ${#pods[@]} -ne 1 ]]; then
    _kctf_log "Found ${#pods[@]} pods, connecting to the most recent one."
    _kctf_log "You can list the other pods with 'kubectl get pods'"
    _kctf_log "and connect to them using 'kubectl exec pod/PODNAME --namespace ${NAMESPACE} -it -- /bin/bash'"

    latestStartTime=$(date -d "$("${KCTF_BIN}/kubectl" get "pods/${pod}" -o jsonpath='{.status.startTime}' --namespace "${NAMESPACE}")" '+%s')
    for (( i=1;  i < ${#pods[@]};  i++ )); do
      otherPod="${pods[$i]}"
      otherStartTime=$(date -d "$("${KCTF_BIN}/kubectl" get "pods/${otherPod}" -o jsonpath='{.status.startTime}' --namespace "${NAMESPACE}")" '+%s')
      # if [[ -z "$("${KCTF_BIN}/kubectl" get "pod/${otherPod}" -o jsonpath="{.status.containerStatuses[?(@.name==\"${CONTAINER}\")].state.running}" --namespace "${NAMESPACE}")" ]]; then
      #   _kctf_log_warn "skipping pod/${otherPod} since the container \"${CONTAINER}\" is not running"
      #   continue
      # fi
      if [[ "${otherStartTime}" -gt "${latestStartTime}" ]]; then
        latestStartTime="${otherStartTime}"
        pod="${otherPod}"
      fi
    done
  fi

  _kctf_log "Connecting to pod ${pod}"
  "${KCTF_BIN}/kubectl" exec "pod/${pod}" --namespace "${NAMESPACE}" -c "${CONTAINER}" -it -- /bin/bash
}

function kctf_chal_debug_port_forward_usage {
  echo -e "usage: kctf chal debug port-forward [args]" >&2
  echo -e "args:" >&2
  echo -e "  -h|--help        print this help" >&2
  if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
    echo -e "  -d|--deployment  deployment (instancer or hostproxy)" >&2
  else
    echo -e "  -i|--instance    instance name of challenge" >&2
  fi
  echo -e "  --port:          port in the challenge to connect to (default 1337)" >&2
  echo -e "  --local-port:    local port to listen on (defaults to random free port)" >&2
}

function kctf_chal_debug_port_forward {
  REMOTE_PORT=1337
  LOCAL_PORT=""

  OPTS="hi:"
  LONGOPTS="help,instance:,port:,local-port:"
  PARSED=$(${GETOPT} --options=$OPTS --longoptions=$LONGOPTS --name "kctf chal debug port-forward" -- "$@")
  if [[ $? -ne 0 ]]; then
    kctf_chal_debug_port_forward_usage
    exit 1
  fi
  eval set -- "$PARSED"

  DEPLOYMENT=""
  INSTANCE=""
  while true; do
    case "$1" in
      -h|--help)
        kctf_chal_debug_port_forward_usage
        exit 0
        ;;
      -d|--deployment)
        DEPLOYMENT="$2"
        shift 2
        ;;
      -i|--instance)
        INSTANCE="$2"
        shift 2
        ;;
      --port)
        REMOTE_PORT="$2"
        shift 2
        ;;
      --local-port)
        LOCAL_PORT="$2"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        _kctf_log_err "Unrecognized argument \"$1\"."
        kctf_chal_debug_port_forward_usage
        exit 1
        ;;
    esac
  done

  require_active_challenge

  _kctf_log 'starting port-forward, ctrl+c to exit'
  if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
    if [[ -z $DEPLOYMENT ]]; then
      _kctf_log_err '--deployment required'
      return 1
    fi
    "${KCTF_BIN}/kubectl" port-forward "deployment/${DEPLOYMENT}" --namespace "${CHALLENGE_NAMESPACE}" --address=127.0.0.1 "${LOCAL_PORT}:${REMOTE_PORT}"
  else
    if [[ -z $INSTANCE ]]; then
      _kctf_log_err '--instance required'
      return 1
    fi
    "${KCTF_BIN}/kubectl" port-forward "job/${INSTANCE}" --namespace "${CHALLENGE_NAMESPACE_MANAGED}" --address=127.0.0.1 "${LOCAL_PORT}:${REMOTE_PORT}"
  fi
}

function kctf_chal_debug_docker {
  CONTAINER="challenge"

  build_image "${CONTAINER}" || return

  DOCKER_NAME="kctf-${KCTF_CTF_NAME}-${CHALLENGE_NAME}-${CONTAINER}"

  # kill any existing containers
  docker kill "${DOCKER_NAME}" >/dev/null 2>/dev/null
  docker container rm "${DOCKER_NAME}" >/dev/null 2>/dev/null

  _kctf_log "Running docker container ${IMAGE_ID} using name ${DOCKER_NAME}"
  docker run -d --name "${DOCKER_NAME}" -it -p 1337 --privileged "${IMAGE_ID}" || return 1
  docker ps -f "name=${DOCKER_NAME}" || return 1
  _kctf_log "Container running, ctrl+c to exit"
  docker attach "${DOCKER_NAME}"
}


function kctf_chal_debug_usage {
  echo -e "usage: kctf chal debug command" >&2
  echo -e "available commands:" >&2
  echo -e "  logs:         print logs of the container" >&2
  echo -e "  ssh:          spawn an interactive bash in the container" >&2
  echo -e "  port-forward: create a port-forward to the container's default port" >&2
  if [[ "$CHALLENGE_NAME" != "instancer" ]]; then
    echo -e "  docker:       run the docker container locally" >&2
  fi
  # echo -e "NOTE: you can use --container=healthcheck flag to debug the healthcheck" >&2
}

function kctf_chal_debug {
  if [[ $# -lt 1 ]]; then
    _kctf_log_err "unexpected argument count"
    kctf_chal_debug_usage
    exit 1
  fi

  case "$1" in
    -h|--help)
      kctf_chal_debug_usage
      exit 0
      ;;
    logs)
      shift
      kctf_chal_debug_logs $@
      ;;
    ssh)
      shift
      kctf_chal_debug_ssh $@
      ;;
    port-forward)
      shift
      kctf_chal_debug_port_forward $@
      ;;
    docker)
      if [[ "$CHALLENGE_NAME" == "instancer" ]]; then
        _kctf_log_err "not supported for instancer"
        kctf_chal_debug_usage
        exit 1
      fi
      shift
      kctf_chal_debug_docker $@
      ;;
    *)
      _kctf_log_err "unknown command"
      kctf_chal_debug_usage
      exit 1
      ;;
  esac
}

function kctf_chal_usage {
  echo -e "usage: chal.sh command" >&2
  echo -e "available commands:" >&2
  echo -e "  start:   deploy the challenge to the cluster" >&2
  echo -e "  stop:    delete the challenge from the cluster" >&2
  echo -e "  status:  print the current status of the challenge" >&2
  echo -e "  certbot: run certbot for the challenge" >&2
  echo -e "  debug:   commands for debugging the challenge" >&2
}

if [[ $# -lt 1 ]]; then
  _kctf_log_err "unexpected argument count"
  kctf_chal_usage
  exit 1
fi

case "$1" in
  -h|--help)
    kctf_chal_usage
    exit 0
    ;;
  start)
    shift
    kctf_chal_start $@
    ;;
  stop)
    shift
    kctf_chal_stop $@
    ;;
  status)
    shift
    kctf_chal_status $@
    ;;
  certbot)
    shift
    kctf_chal_certbot $@
    ;;
  debug)
    shift
    kctf_chal_debug $@
    ;;
  *)
    _kctf_log_err "unknown command"
    kctf_chal_usage
    exit 1
    ;;
esac
